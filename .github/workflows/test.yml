name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
        options: --health-cmd="curl -f http://localhost:8000/api/v1/heartbeat || exit 1" --health-interval=30s --health-timeout=10s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify ChromaDB is running
      run: |
        curl -f http://localhost:8000/api/v1/heartbeat || (echo "ChromaDB not ready" && exit 1)

    - name: Run type check
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        LOG_LEVEL: error
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        LOG_LEVEL: error
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        LOG_LEVEL: error
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000
        # Mock Azure credentials for E2E tests
        AZURE_CLIENT_ID: test-client-id
        AZURE_TENANT_ID: test-tenant-id

    - name: Generate test coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        LOG_LEVEL: error
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        files: ./coverage/lcov.info,./coverage/clover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
          jest-junit.xml

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    services:
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance benchmarks
      run: npm run benchmark
      env:
        NODE_ENV: test
        LOG_LEVEL: error
        CHROMADB_HOST: localhost
        CHROMADB_PORT: 8000

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark-results.json
          performance-profile.txt

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npm run deps:audit

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: typescript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  notify-status:
    runs-on: ubuntu-latest
    needs: [test, performance-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.performance-tests.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        echo "• Unit tests: ✅"
        echo "• Integration tests: ✅" 
        echo "• E2E tests: ✅"
        echo "• Performance tests: ✅"
        echo "• Security scan: ✅"

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.performance-tests.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        echo "• Unit tests: ${{ needs.test.result == 'success' && '✅' || '❌' }}"
        echo "• Performance tests: ${{ needs.performance-tests.result == 'success' && '✅' || '❌' }}"
        echo "• Security scan: ${{ needs.security-scan.result == 'success' && '✅' || '❌' }}"
        exit 1